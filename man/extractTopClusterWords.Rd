% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractTopClusterWords.R
\name{extractTopClusterWords}
\alias{extractTopClusterWords}
\title{Extract Top Keywords per Cluster by Rand Index}
\usage{
extractTopClusterWords(fd_obj, percent_words = 50)
}
\arguments{
\item{fd_obj}{A list object returned by \code{computeClusterFd()}, containing the functional data object,
partition, keyword labels, and Rand Index scores.}

\item{percent_words}{Numeric. The percentage of keywords to retain for each cluster (default = 50).}
}
\value{
A named list of data frames, one per cluster, each containing:
\describe{
\item{term}{Keyword label.}
\item{zone}{Frequency zone of the keyword.}
\item{cluster}{Cluster number.}
\item{rand_index}{Rand Index value (rounded).}
}
}
\description{
This function selects, for each cluster, the top keywords based on their individual
Rand Index scores, which reflect similarity to the cluster center trajectory.
}
\examples{
\dontrun{
tdm <- system.file("extdata", "tdm.csv", package = "cccc")
corpus <- system.file("extdata", "corpus.csv", package = "cccc")
data <- importData(tdm_file = tdm, corpus_file = corpus,
sep_tdm = ";",sep_corpus_info = ";",zone="stat")

data_nchi <- normalization(data, normty = "nchi", sc = 1000)
g <- runClusteringRange(data_nchi,
k_range = 2:26,
n_repeats = 20,
seed = 123,
dist_method = "euclidean",
verbose = TRUE)

results_m2 <- smoothingSelection(data_nchi,
penalty_type = "m-2", plot = FALSE)
results_2  <- smoothingSelection(data_nchi,
penalty_type = "2", plot = FALSE)
results_1  <- smoothingSelection(data_nchi,
penalty_type = "1", plot = FALSE)
results_0  <- smoothingSelection(data_nchi,
penalty_type = "0", plot = FALSE)

Compare and select best smoothing strategy
opt_res <- optimalSmoothing(list("m-2" = results_m2,
"2" = results_2,
"1" = results_1,
"0" = results_0))

g2 <- buildCIVf(clustering_set=g,
criteria_set = NULL,
min_valid_values = 0.75,
verbose = TRUE)

g3 <- selectBestPartitions(g2, g, graph=T)
rand_result <- computeRandMatrix(g3)

best_k <- selectBestKfromRand(rand_result)

final_part <- extractBestPartition(g3, best_k$best_k,
rand_matrix=rand_result)

#' Compute Smoothed Cluster Trajectories and Summary Information
fd_obj <- computeClusterFd(data = data_nchi, final_part =
final_part, opt = opt_res)

Extract Top Keywords per Cluster by Rand Index
top_keywords <- extractTopClusterWords(fd_obj, percent_words = 50)
}

}
