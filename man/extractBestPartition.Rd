% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractBestPartition.R
\name{extractBestPartition}
\alias{extractBestPartition}
\title{Extract the Best Partition for a Given Number of Clusters}
\usage{
extractBestPartition(best_partitions, best_k, rand_matrix = NULL)
}
\arguments{
\item{best_partitions}{An object of class \code{ccccBestPartitions}, returned by \code{selectBestPartitions()}.}

\item{best_k}{Integer. The selected number of clusters (\code{k}).}

\item{rand_matrix}{Optional. An object of class \code{ccccRandMatrix} returned by \code{computeRandMatrix()}.
If provided, the function will select the partition with the highest mean ARI.}
}
\value{
A list containing:
\describe{
\item{partition}{Integer vector of cluster assignments.}
\item{criterion}{The internal criterion used for selecting this partition.}
\item{index}{Index of the selected partition among repetitions.}
\item{k}{The number of clusters.}
\item{label}{Unique label for the partition (e.g., "k4_Silhouette").}
\item{mean_ari}{Mean Adjusted Rand Index with other partitions for the same \code{k} (if available).}
}
}
\description{
This function selects the best partition from a set of candidate solutions
corresponding to a given number of clusters (\code{k}). If multiple partitions
are available for the same \code{k}, and a Rand matrix is provided, the partition
with the highest average Adjusted Rand Index (ARI) is selected as the most stable.
}
\examples{
\dontrun{
tdm <- system.file("extdata", "tdm.csv", package = "cccc")
corpus <- system.file("extdata", "corpus.csv", package = "cccc")
data <- importData(tdm_file = tdm, corpus_file = corpus,
sep_tdm = ";",sep_corpus_info = ";",zone="stat")

data_nchi <- normalization(data, normty = "nchi", sc = 1000)
g <- runClusteringRange(data_nchi,
k_range = 2:26,
n_repeats = 20,
seed = 123,
dist_method = "euclidean",
verbose = TRUE)

g2 <- buildCIVf(clustering_set=g,
criteria_set = NULL,
min_valid_values = 0.75,
verbose = TRUE)

g3 <- selectBestPartitions(g2, g, graph=T)
rand_result <- computeRandMatrix(g3)

best_k <- selectBestKfromRand(rand_result)

final_part <- extractBestPartition(g3, best_k$best_k, rand_matrix=rand_result)
}

}
